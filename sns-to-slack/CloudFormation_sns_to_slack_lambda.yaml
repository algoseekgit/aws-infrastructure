AWSTemplateFormatVersion: 2010-09-09
Description: >
  Lambda deployment using CloudFormation.
  https://github.com/aws-samples/aws-cloudformation-inline-python-lambda-example
Parameters:
  LambdaFunctionName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    Description: The name of the Lambda function to be deployed
    Default: SNS-to-slack-lambda
  LambdaRoleName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[\w+=,.@-]+'
    Description: The name of the IAM role used as the Lambda execution role
    Default: Lambda-Role-SNS-to-slack
 
Resources:
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: as-lambda-layers
        S3Key: python/3.9/slack-sdk/slack-sdk-3.19.5.zip
      Description: Layer containing slack SDK for SNS-to-slack lambda function
      LayerName: slack-package-python39
      LicenseInfo: MIT
  
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      Description: An execution role for a Lambda function launched by CloudFormation
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
  
  Function1:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Description: >
        Make shure to use proper Slack API token as an environmental variable. For test choose standard SNS notification and overwrite TopicArn
        with the one containing proper chanel ("TopicArn": "arn:aws:sns:us-east-1:123456789012:dev-data-lake").
      Environment:
        Variables:
          SLACK_API_TOKEN: xoxb-123456789012-1234567890123-XXXXX1XXXXXXX2XXXXXXXXX3
      Code:
        ZipFile: |
          import os
          from slack_sdk import WebClient
          from slack_sdk.errors import SlackApiError

          def post_slack_message(client: WebClient, channel: str, text: str) -> str:
              """
              Return text message on error and empty string on success
              """
              if not channel or not channel.startswith('#'):
                return f"{channel} does not exist"
              try:
                response = client.chat_postMessage(channel=channel, text=text)
              except SlackApiError as e:
                return str(e)
              if not response["ok"]:
                try:
                  return response["error"]
                except KeyError:
                  return "Cannot post to channel"
              return ""
          
          def lambda_handler(event, context):
              '''The Lambda function which gets an SNS as input and publishes 
              the message to a slack channel
              '''
              for record in event['Records']:
                  if record["EventSource"] != "aws:sns":
                      continue
                  sns = record['Sns']
                  topic_arn = sns["TopicArn"]
                  slack_channel = '#' + topic_arn.split(':')[-1]
                  account = topic_arn.split(':')[-2]
                  if sns["Subject"] is None:
                      subject = "Lambda function failure"
                      m_text = json.dumps(json.loads(sns["Message"]), indent=2)
                  else:
                      subject = sns["Subject"]
                      m_text = sns["Message"]
                  message = f"*({account}) {subject}*: {m_text}"
                  webclient = WebClient(token=os.environ['SLACK_API_TOKEN'])
                  status = post_slack_message(webclient, slack_channel, message)
                  if status:
                    raise ValueError(status)

      FunctionName: SNS-to-slack-lambda
      Handler: index.lambda_handler
      Layers:
        - !Ref LambdaLayer
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt "LambdaRole.Arn"

